name: Run tests with coverage
description: Runs all mapnik tests with coverage
inputs:
  cmake-preset:
    description: the used cmake preset
    required: true
runs:
  using: composite
  steps:
    - name: Set PROJ_LIB
      shell: bash
      run: |
        if [ "${RUNNER_OS}" == "Windows" ]; then
          cmake --preset ${{ inputs.cmake-preset }} \
            -N -L | grep -o "PROJ_LIB=.*" >> ${GITHUB_ENV}
        else
          echo "PROJ_LIB="$(pkg-config proj --variable datadir) >> ${GITHUB_ENV}
        fi

    - name: Test
      shell: bash
      env:
        UPDATE: 1
      run: |
        if [ "${RUNNER_OS}" == "Windows" ]; then
          OpenCppCoverage --modules *libmapnik* --modules mapnik*.exe  --modules *.input --sources ${{ github.workspace }} --export_type binary --cover_children -- ctest --preset ${{ inputs.cmake-preset }}
        else
          ctest --preset ${{ inputs.cmake-preset }}
        fi

    - name: Test visuals
      continue-on-error: true
      working-directory: build/out
      shell: bash
      run: |
        if [ "${RUNNER_OS}" == "Windows" ]; then
          OpenCppCoverage --modules *libmapnik* --modules mapnik*.exe  --modules *.input --sources ${{ github.workspace }} --export_type binary --cover_children --input_coverage=../../ctest.cov -- ./mapnik-test-visual.exe -j ${CTEST_PARALLEL_LEVEL} --output-dir ./visual-test-result
        else
          ./mapnik-test-visual -j ${CTEST_PARALLEL_LEVEL} --output-dir ./visual-test-result
        fi

    - name: Pack visual test results
      working-directory: build/out
      shell: bash
      run: tar cfvz visual-test-results.tar.gz ./visual-test-result

    - name: Generate run guid
      id: run-guid
      shell: pwsh
      run: |
        $guid = New-Guid
        echo ("GUID=" + $guid.toString()) >> $env:GITHUB_OUTPUT

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.cmake-preset }}-visual-tests-${{ steps.run-guid.outputs.GUID }}
        path: build/out/visual-test-results.tar.gz

    - name: Run Benchmarks
      working-directory: build/out
      if: runner.os != 'Windows'
      shell: bash
      run: ./run_benchmarks

    - name: Collect coverage (Linux & macOS)
      working-directory: build
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if [ "${RUNNER_OS}" == "macOS" ]; then
          LCOV_EXTRA_OPTIONS="--ignore-errors count,gcov,inconsistent,range,unused --keep-going"
        fi
        lcov ${LCOV_EXTRA_OPTIONS:-} --directory . --capture --output-file coverage.info
        lcov ${LCOV_EXTRA_OPTIONS:-} --remove coverage.info '/usr/*' '*/vcpkg_installed/*'  '/.cache/*' '*/test/*'  --output-file coverage.info
        lcov ${LCOV_EXTRA_OPTIONS:-} --list coverage.info

    - name: Upload coverage to Codecov (Linux & macOS)
      if: runner.os != 'Windows'
      uses: codecov/codecov-action@v4
      with:
        files: build/coverage.info

    - name: Upload coverage to Codecov (Windows)
      if: runner.os == 'Windows'
      uses: codecov/codecov-action@v4
      with:
        files: build/out/mapnik-test-visual.cov
